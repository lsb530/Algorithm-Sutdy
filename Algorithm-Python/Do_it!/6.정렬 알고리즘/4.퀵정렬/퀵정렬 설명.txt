퀵 정렬(Quick sort)은 가장 빠른 정렬 알고리즘으로 알려져 있으며 널리 사용된다.
퀵 정렬은 알고리즘의 정렬 속도가 매우 빠르다(quick)하여 고안자인 찰스 A.R. 호어가 붙인 이름이다.

# 배열을 두 그룹으로 나누기
먼저 배열을 두 그룹으로 나누는 순서를 살펴보자. 다음 배열에서 6을 피벗으로 선택하여 그룹을 나눈다.
피벗을 x, 왼쪽 끝 원소의 인덱스를 pl(왼쪽 커서), 오른쪽 끝 원소의 인덱스를 pr(오른쪽 커서)라고 한다.

 5   7   1   4   6   2   3   9   8
 pl              x               pr
(->)                            (<-)

- a[pl] >= x가 성립하는 원소를 찾을 때까지 pl을 오른쪽 방향으로 스캔한다.
- a[pr] <= x가 성립하는 원소를 찾을 때까지 pr을 왼쪽 방향으로 스캔한다.

이 과정을 거치면 pl(왼쪽 커서)과 pr(오른쪽 커서)는 다음 그림의 위치에서 정지한다.
pl은 피벗 이상인 원소에, pr는 피벗 이하인 원소에 위치한다. 여기서 pl과 pr가 위치하는 원소 a[pl]과 a[pr]의 값을 교환한다.
그러면 피벗 이하인 값은 왼쪽으로 이동하고, 피벗 이상인 값을 오른쪽으로 이동한다.
 5   7   1   4   6   2   3   9   8
     pl          x       pr
    (->)                (<-)
다시 스캔을 계속하면 pl과 pr는 다음 그림의 위치에서 정지하고, 원소 a[pl]과 a[pr]의 값을 교환한다.
 5   3   1   4   6   2   7   9   8
               pl(x) pr
                (->)(<-)
다시 스캔을 계속하면 다음 그림처럼 pl과 pr가 서로 교차한다.
 5   3   1   4   2   6   7   9   8
               pr(x) pl
                (<-)(->)
<------피벗이하------><--피벗이상--->
pl과 pr가 교차하면 이로써 그룹을 나누는 과정이 끝나고, 배열을 다음과 같이 두 그룹으로 나뉘게된다.
- 피벗 이하인 그룹: a[0], ..., a[pl-1]
- 피벗 이상인 그룹: a[pr+1], ..., a[n-1]
또 그룹을 나누는 작업이 끝난 다음 pl>pr+1일 때에 한해서 다음과 같은 그룹이 만들어진다.
- 피벗과 일치하는 그룹: a[pr+1], ..., a[pl-1]
pl과 pr이 모두 피벗과 같은 위치에 있을때에도 교환을한다.
같은 원소를 교환하므로 의미가 없어보이지만 이 시도는 최대 1번이다.
* 이렇게 같은 원소를 교환하지 않으면 원소를 교환할 때마다 매번 pl과 pr가 같은 위치에 있는지 체크해야 한다.
  매번 체크하는 횟수보다 1번만 같은 원소를 교환하는 것이 비용이 적게 든다.

# 피벗 선택하기
방법1: 나누어야 할 배열의 원소 수가 3 이상이면, 배열에서 임의의 원소 3개를 꺼내 중앙값인 원소를 피벗으로 선택
방법2: 나누어야 할 배열의 맨 앞 원소, 가운데 원소, 맨 끝 원소를 정렬한 뒤 가운데 원소와 맨 끝에서 두 번째 원소를 교환한다.
       맨 끝에서 두 번째 원소값 a[right-1]이 피벗으로 선택되었고, 그 동시에 나눌 대상을 a[left+1]~a[right-2]로 좁힌다.

=> 퀵 정렬은 배열을 조금씩 나누어 보다 작은 문제를 푸는 과정을 반복하므로 시간 복잡도는 O(nlogn)이다.
   그런데 정렬하는 배열의 초깃ㄱ밧이나 피벗을 선택하는 방법에 따라 실행 시간 복잡도가 증가하는 경우도 있다.
   예를 들어 매번 1개의 원소와 나머지 원소로 나누어진다면 n번의 분할이 필요하다. 이러한 최악의 경우
   시간복잡도는 O(n^2)이 된다.
   퀵 정렬은 원소 수가 적은 경우에는 그다지 빠른 알고리즘이 아닌 것으로 알려져 있다.
   그래서 다음 2가지 방법을 적용하여 quick_sort2 프로그램을 작성했다.
   - 원소 수가 9개 미만인 경우 단순 삽입 정렬로 전환합니다.
   - 피벗 선택은 방법 2를 채택한다.