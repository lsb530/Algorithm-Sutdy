도수정렬(Counting Sort)은 원소의 대소 관계를 판단하지 않고 빠르게 정렬하는 알고리즘으로,
도수 분포 세기(Distribution Counting) 정렬이라고도 한다.
지금까지 학습한 정렬 알고리즘에서는 두 원소의 키값을 비교하여 정렬했지만 도수 정렬은 원소를 비교할 필요가 없다는 특징이
있다. 밑의 그림은 10점 만점테스트에서 학생 9명의 점수를 도수 정렬하는 알고리즘을 나타낸다
- 정렬할 배열은 a, 원소 수는 n, 점수의 최댓값은 max이다.

* 1단계 : 도수 분포표 만들기
for i in range(n): f[a[i]] += 1
        0   1   2   3   4   5   6   7   8
    a [ 5   7   0   2   4   10  3   1   3 ]

        0   1   2   3   4   5   6   7   8   9   10
    f [ 0   0   0   0   0   0   0   0   0   0   0 ] 0    <= 0~10점을 나타내기 위해 원소수는 총 11개이다.
      [ 0   0   0   0   0   1   0   0   0   0   0 ] 1   f[a[0]] += 1 는 f[5] += 1과 같다
      [ 0   0   0   0   0   1   0   1   0   0   0 ] 2   f[a[1]] += 1 는 f[7] += 1과 같다
      [ 1   0   0   0   0   1   0   1   0   0   0 ] 3   f[a[2]] += 1 는 f[0] += 1과 같다
                            .
                            .
                            .
      [ 1   1   1   2   1   1   0   1   0   0   1 ] 완성
- 도수 분포표 : 확률과 통계에서 자주 등장하는 용어인 도수 분포표는 자료를 몇 개의 등급으로 나누고 각 등급에 속하는 도수를
                조사하여 나타낸 표를 의미한다. 여기에서 도수는 각 등급에 속하는 자료의 개수이다. 예를 들어 완성된 도수 분포표
                에서 f[3]의 2는 3점인 학생이 모두 2명이라는 의미이다.

* 2단계 : 누적 도수 분포표 만들기
다음으로 '0점부터 n점까지 학생이 몇 명 있는지'를 누적된 값을 나타내는 누적 도수 분포표를 만든다.
밑의 그림은 배열 f의 두 번째 원소부터 바로 앞의 원솟값을 더하는 과정을 나타낸다. 가장 아래에 있는 배열 f는 완성된
누적 도수 분포표이다.
(예를 들어 f[4]의 값인 6은 0~4점을 받은 학생의 누계가 6명이고, f[10]의 값인 9는 0~10점을 받은 학생의 누계가 9명이라는 것을
의미한다)
for i in range(1, max + 1): f[i] += f[i - 1]

    f [ 1   1   1   2   1   1   0   1   0   0   1 ]
      [ 1   2   1   2   1   1   0   1   0   0   1 ]  // f[1] += f[0]
      [ 1   2   3   2   1   1   0   1   0   0   1 ]  // f[2] += f[1]
      [ 1   2   3   5   1   1   0   1   0   0   1 ]  // f[3] += f[2]
      [ 1   2   3   5   6   1   0   1   0   0   1 ]  // f[4] += f[3]
      [ 1   2   3   5   6   7   0   1   0   0   1 ]  // f[5] += f[4]
      [ 1   2   3   5   6   7   7   1   0   0   1 ]  // f[6] += f[5]
      [ 1   2   3   5   6   7   7   8   0   0   1 ]  // f[7] += f[6]
      [ 1   2   3   5   6   7   7   8   8   0   1 ]  // f[8] += f[7]
      [ 1   2   3   5   6   7   7   8   8   8   1 ]  // f[9] += f[8]
      [ 1   2   3   5   6   7   7   8   8   8   9 ]  // f[10] += f[9] 완성

* 3단계 : 작업용 배열 만들기
앞의 단계에서 각 점수를 받은 학생이 몇 번째에 위치하는지 알 수 있으므로 이 시점에서 정렬은 거의 마쳤다고 볼 수있다.
남은 작업은 배열 a의 각 원솟값과 누적 분포표 f를 대조하여 정렬을 완료한 배열을 만드는 것이다. 이 작업에는 배열 a와 원소 수가
같은 작업용 배열 b가 필요하다. 배열 a의 원소를 맨 끝에서 맨 앞으로 스캔하면서 배열 f와 대조한다.
밑의 그림은 작업용 배열을 만드는 과정을 보여준다. 이 그림과 작업용 배열 b를 만드는 아래의 for문을 같이 비교하면서 살펴보자.

