"""
셸 정렬(Shell sort)은 단순 삽입 정렬의 장점은 살리고 단점은 보완하여 더 빠르게 정렬하는 알고리즘
도널드 L.셸이 고안한 셸 정렬 알고리즘이다.
셸 정렬은 먼저 정렬할 배열의 원소를 그룹으로 나눠 각 그룹별로 정렬을 수행합니다.
그 후 정렬된 그룹을 합치는 작업을 반복하여 원소의 이동 횟수를 줄이는 방법입니다.
# 셸 정렬은 퀵정렬이 고안되기 전까지는 가장 빠른 알고리즘으로 알려졌다.
[8, 1, 4, 2, 7, 6, 3, 5] 의 배열을 예로 들어 설명하면
먼저 서로 4칸씩 떨어진 원소를 꺼내어 (8,7),(1,6)(4,3),(2,5)의 4개 그룹으로 나누고
각 그룹별로 각각 정려합니다.
즉 (8,7)을 정렬하여 (7,8)로, (1,6)을 정렬하여 (1,6)으로 (4,3)을 정렬하여 (3,4)로, (2,5)를 정렬하여 (2,5)로 만듭니다.
[7, 1, 3, 2, 8, 6, 4, 5]
이처럼 서로 4칸 떨어진 원소를 정렬하는 방법을 '4-정렬'이라고 합니다.
이어서 2칸 떨어진 원소를 모두 꺼내(7,3,8,4), (1,2,6,5)의 두 그룹으로 나누어 '2-정렬'을 수행합니다.
(7,3,8,4)는 (3,4,7,8)로, (1,2,6,5)는 (1,2,5,6)으로 되고 합치면
[3, 1, 4, 2, 7, 5, 6, 8]이 된다.
마지막으로 '1-정렬'(단순삽입정렬) 적용하여 정렬하면 정렬이 완료된다.
[1, 2, 3, 4, 5, 6, 7, 8]
    1. 2개 원소에서 4-정렬을 수행(4개 그룹, 4번)
    2. 4개 원소에서 2-정렬을 수행(2개 그룹, 2번)
    3. 8개 원소에서 1-정렬을 수행(8개 그룹, 1번)
        < 총 7번 정렬이 일어난다 >
"""
from typing import MutableSequence


def shell_sort(a: MutableSequence) -> None:
    """셸 정렬"""
    n = len(a)
    h = n // 2
    while h > 0:
        for i in range(h, n):  # 여기부터는 단순 삽입정렬 하지만 다른점은 주목하는 원소와 비교하는 원소가 이웃하지않고
            j = i - h  # h개만큼 떨어져 있다! while문을 반복할때마다 h는 2씩 나눠진다. 원소수(8):4->2->1 / 원소수(7):3->1
            tmp = a[i]
            while j >= 0 and a[j] > tmp:
                a[j + h] = a[j]
                j -= h
            a[j + h] = tmp
        h = h // 2


if __name__ == '__main__':
    print('셸 정렬을 수행합니다.')
    num = int(input('원소 수를 입력하세요.: '))
    x = [None] * num  # 원소 수가 num인 배열을 생성

    for i in range(num):
        x[i] = int(input(f'x[{i}]: '))

    shell_sort(x)  # 배열 x를 셸 정렬

    print('오름차순으로 정렬했습니다.')
    for i in range(num):
        print(f'x[{i}] = {x[i]}')
