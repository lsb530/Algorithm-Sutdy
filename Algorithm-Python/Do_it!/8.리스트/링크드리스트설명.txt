# 노드 클래스 Node
 - 필드
 data: 데이터(데이터에 대한 참조: 임의의 형)
 next: 뒤쪽 포인터(뒤쪽 노드에 대한 참조: Node형)

 - 함수
 __init__(self, data: Any = None, next: Node = None)
 : 전달받은 data와 next를 해당 필드에 대입합니다. 호출할 때 어떤 인수도 생략할 수 있으며, 생략할 경우에는 None으로 간주합니다.

# 연결 리스트 클래스 LinkedList
 - 필드
 no: 리스트에 등록되어 있는 노드의 개수
 head: 머리 노드에 대한 참조
 current: 현재 주목하고 있는 노드에 대한 참조, 여기서는 주목 포인터라고 한다. 리스트에서 노드를 검색하여, 그 노드를 주목한 직후에
          노드를 삭제하는 등의 용도로 사용
 - 판단
  head is None : 빈 연결 리스트
  head.next is None : 노드가 1개인 연결 리스트
  head.next.next is None : 노드가 2개인 연결 리스트
  p(Node).next is None : 꼬리 노드인지 판단

 - 함수
 __init__(self) -> None
 : 연결리스트 클래스 LinkedList의 __init__() 함수는 노드가 하나도 없는 빈 연결 리스트를 생성한다.
   head는 머리 노드에 대한 참조일뿐 머리 노드 그 자체가 아님을 주의해야 한다.
   노드가 존재하지 않는 빈 연결 리스트는 head가 참조하는 곳이 없으므로(참조해야 하는 노드가 존재하지 않으므로) 그 값을 None으로 한다.

 __len__(self) -> int
 : 연결 리스트의 노드 개수를 반환하는 함수. no값을 그대로 반환한다

 search(self, data: Any) -> int
 : 인수로 주어진 data와 값이 같은 노드를 검색하는 함수. 검색 알고리즘은 선형검색을 사용한다. 목적 노드를 만날 때까지 머리 노드부터
   순서대로 스캔한다.
   - 종료조건1: 검색 조건을 만족하는 노드를 발견하지 못하고 꼬리 노드까지 왔을 경우
   - 종료조건2: 검색 조건을 만족하는 노드를 발견한 경우

 __contains__(self, data: Any) -> bool
 : 리스트에 data와 값이 같은 노드가 포함되어 있는지를 판단하는 함수.
   포함되어 있으면 True를 반환하고, 그렇지않으면 False를 반환한다.

 add_first(self, data: Any) -> None
 : 리스트의 맨 앞에 노드를 삽입하는 함수.

 add_last(self, data: Any) -> None
 : 리스트의 맨 끝에 노드를 삽입하는 함수.
   - 리스트가 비어있을 때: 맨 앞에 노드를 삽입하는 것과 같은 처리를 수행하므로 add_first() 함수를 호출
   - 리스트가 비어있지 않을 때: 리스트의 맨 끝에 노드를 삽입한다.

 remove_first(self) -> None
 : 머리 노드를 삭제하는 함수. 삭제 처리를 수행하는 것은 리스트가 비어있지 않을때(head is not None)이다.

 remove_last(self) -> None
 : 꼬리 노드를 삭제하는 함수. 삭제 처리를 수행하는 것은 리스트가 비어있지 않을때(head is not None)이다.
   리스트에 존재하는 노드가 하나뿐인지 확인하고 그에 따라 다음과 같이 다르게 처리합니다.
   - 리스트에 노드가 하나만 존재할 때: 미리 노드를 삭제하는 것이므로 remove_first()를 호출
   - 리스트에 노드가 2개 이상 존재할 때: 리스트의 맨 끝에서 노드 F를 삭제합니다.

 remove(self, p: Node) -> None
 : 임의의 노드를 삭제하는 함수. 삭제 처리를 수행하는 것은 리스트가 비어 있지 않고 인수로 주어진 노드 p(p가 참조하는 노드)가 존재할 때
   - p가 머리 노드일 때: 머리노드를 삭제하는 것이므로 remove_first()함수 호출
   - p가 머리 노드가 아닐 때: 리스트에서 p가 참조하는 노드 D를 삭제한다.

 remove_current_node(self) -> None
 : 현재 주목하고 있는 노드를 삭제하는 함수. 주목 포인터 current를 remove() 함수에 전달하여 처리를 맡긴다.
   주목 포인터 current가 참조하는 곳은 삭제한 노드의 앞쪽 노드로 업데이트합니다.

 clear(self) -> None
 : 모든 노드를 삭제하는 함수. 연결 리스트가 비어 있을 때(head가 None이 될때)까지 머리 노드의 삭제를 반복하여 모든 노드를 삭제한다.
   리스트가 비어 있으므로 주목 포인터 current의 값도 None으로 업데이트합니다.

 next(self) -> bool
 : 주목 노드를 한 칸 뒤쪽으로 이동시키는 함수. 다만 주목 노드를 한 칸 뒤로 이동시키려면 리스트가 비어 있지 않고 주목 노드 뒤쪽에
   노드가 존재해야 한다. 구체적으로는 주목 포인터 current를 current.next로 업데이트한다. 주목 노드를 이동시키면 True, 그렇지 않으면
   False를 반환한다.

 print(self) -> None
 : 리스트 순서대로 모든 노드의 데이터를 출력하는 함수. ptr을 사용하여 미리 노드에서 꼬리 노드까지 스캔하면서 각 노드의 데이터 ptr.data를 출력
   print_current_node() 함수와 print() 함수는 주목 포인터 current 값을 업데이트하지 않습니다.

# 함수를 실행한 뒤의 current 값
- __init__() : None
- search() : 검색에 성공하면 발견할 수 있는 노드
- add_first() : 삽입한 머리 노드
- add_last() : 삽입한 꼬리 노드
- remove_first() : 삭제한 뒤 머리 노드(리스트가 비어 있으면 None)
- remove_last() : 삭제한 뒤 꼬리 노드(리스트가 비어 있으면 None)
- remove() : 삭제한 노드의 앞쪽 노드
- remove_current_node() : 삭제한 노드의 앞쪽 노드
- clear() : None
- next() : 이동한 뒤 주목 노드
- print_current_node() : 업데이트 X
- print() : 업데이트 X

# 이터레이터용 클래스 LinkedListIterator

 - 함수
 __init__(self, head: Node) -> None
 : 초기화 함수. 현재 current를 head로 초기화시킨다

 __iter__(self) -> LinedListIterator
 : 현재 노드를 반환합니다.

 def __next__(self) -> Any
 : 다음 원소를 꺼내 반환한다. 반환하는 원소가 없으면 StopIteration 예외처리를 내보낸다.

 이터레이터는 current를 업데이트하지 않는다.


