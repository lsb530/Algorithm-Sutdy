# 노드 클래스 Node
 - 필드
 data: 데이터(데이터에 대한 참조: 임의의 형)
 prev : 앞쪽 포인터(앞쪽 노드에 대한 참조: Node형)
 next: 뒤쪽 포인터(뒤쪽 노드에 대한 참조: Node형)

 - 함수
 __init__(self, data: Any = None, prev: Node = None, next: Node = None) -> None
 self.prev = prev or self
 self.next = next or self
 : 전달받은 data, prev, next를 해당 필드에 대입합니다.
   또 매개변수 prev 또는 next로 전달받은 값이 None일 경우 앞쪽 포인터 prev와 뒤쪽 포인터 next에 None이 아닌 self를 대입합니다.
   그 결과 앞쪽 포인터와 뒤쪽 포인터는 자신의 인스턴스를 참조하게된다.
   or연산자의 해석은 이렇습니다.
   prev가 참이면(None이 아니면) self.prev에 prev를 대입합니다.
   prev가 거짓이면(None이면) self.prev에 self를 대입합니다.

# 원형 이중 연결 리스트 클래스 DoubleLinkedList
 - 필드
 no: 리스트에 등록되어 있는 노드의 개수
 head: 머리 노드에 대한 참조
 current: 현재 주목하고 있는 노드에 대한 참조, 여기서는 주목 포인터라고 한다. 리스트에서 노드를 검색하여, 그 노드를 주목한 직후에
          노드를 삭제하는 등의 용도로 사용
 - 판단(Node형 변수 p)
  p.prev is head : p는 머리 노드인가?(더미노드제외)
  p.prev.prev is head : p는 맨 앞에서 2번째 노드인가?(더미노드제외)
  p.next is head : p는 꼬리노드인가?
  p.next.next is head : p는 맨 끝에서 2번째 노드인가?


 - 함수
 __init__(self) -> None
 : 비어 있는 원형 이중 연결 리스트를 만든다. 처음에는 데이터가 없는 노드를 1개 만든다.
   이 노드는 삽입과 삭제를 원활하게 처리하기 위해 리스트의 맨 앞에 계속 존재하는 더미 노드이다.
   Node()에 의해 생성된 노드의 prev와 next는 클래스 Node의 __init__() 함수 동작으로 자신의 노드를 참조한다.
   head와 current가 참조하는 곳은 생성한 더미노드이다(자기자신의 노드).

 __len__(self) -> int
 : 연결 리스트의 노드 개수를 반환하는 함수. no값을 그대로 반환한다

 search(self, data: Any) -> int
 : 인수로 주어진 data와 값이 같은 노드를 검색하는 함수. 검색 알고리즘은 선형검색을 사용한다. 다만 리스트의 실제 머리 노드가
   맨 앞의 더미 노드가 아니라 그 뒤쪽 노드이므로 검색의 시작점이 다르다.
   더미노드의 뒤쪽 포인터가 참조하는 노드A가 실제 머리 노드이다. 따라서 검색을 시작하는 위치는 head가 아니라 head.next이다.
   더미노드: head, 머리노드: head.next, 꼬리노드:head.prev
   더미-A-B-C-D-E 일경우 ptr이 주목하는 것이 노드 E일때 ptr = ptr.next는 더미노드가 된다. 즉, 종료조건이된다.

 __contains__(self, data: Any) -> bool
 : 리스트에 data와 값이 같은 노드가 포함되어 있는지를 판단하는 함수.
   포함되어 있으면 True를 반환하고, 그렇지않으면 False를 반환한다.

 print_current_node() -> None:
 : 주목 노드(self)의 데이터 current.data를 출력하는 함수이다. 리스트가 비어있으면 주목노드가 존재하지않으므로 '주목노드는 없습니다.'를 출력한다.
   즉 self.current.data를 출력함

 print(self) -> None
 : 리스트 순서대로 모든 노드의 데이터를 출력하는 함수. head.next에서 시작하여 뒤쪽 포인터를 따라가면서 스캔하여 각 노드의 데이터를 출력한다.
   한바퀴 돌아 head로 오면 스캔을 종료한다.
 * 출력을 시작하는 위치는 head.next가 참조하는 노드이다.

 print_reverse(self) -> None
 : 리스트에 있는 모든 노드를 맨 끝부터 역순으로 출력하는 함수이다. head.prev에서 시작하여 앞쪽 포인터를 따라가면서 스캔하여 각 노드의 데이터를 출력한다.
   한바퀴 돌고 head로 되돌아가면 스캔이 종료된다.
 * 출력을 시작하는 위치는 head.prev가 참조하는 노드이다.

 next(self) -> bool
 : 주목 노드를 한 칸 뒤쪽으로 이동시키는 함수. 다만 주목 노드를 한 칸 뒤로 이동시키려면 리스트가 비어 있지 않고 주목 노드 뒤쪽에
   노드가 존재해야 한다. 구체적으로는 주목 포인터 current를 current.next로 업데이트한다. 주목 노드를 이동시키면 True, 그렇지 않으면
   False를 반환한다.

 prev(self) -> bool
 : 주목 노드를 한 칸 앞으로 이동시키는 함수. 다만 주목 노드를 한 칸 뒤로 이동시키려면 리스트가 비어 있지 않고 주목 노드 앞쪽에
   노드가 존재해야 한다. 구체적으로는 주목 포인터 current를 current.prev로 업데이트한다. 주목 노드를 이동시키면 True, 그렇지 않으면
   False를 반환한다.

 add(self, data: Any) -> None
 : 주목 노드 바로 뒤에 노드를 삽입하는 함수. 새로 삽입하는 노드를 Node(data, current, current.next)로 생성한다. 그 결과 생성된 노드의 데이터는
   data, 앞쪽 포인터가 참조하는 곳은 현재주목노드의 앞, 뒤쪽 포인터가 참조하는 곳은 현재주목노드의 뒤가 된다.
   현재노드의 뒤쪽포인터 current.next와 다음노드의 앞쪽포인터 current.next.prev 모두 새로 삽입한 노드 node를 참조하도록 업데이트한다.
   주목 포인터 current가 삽입한 노드를 참조하도록 업데이트한다.

 add_first(self, data: Any) -> None
 : 리스트의 맨 앞에 노드를 삽입하는 함수. 더미 노드 바로 뒤에 노드를 삽입하기 위해 주목 포인터 current가 참조하는 곳을 head로 업데이트한 상태에서
   add()함수를 호출한다.

 add_last(self, data: Any) -> None
 : 리스트의 맨 끝에 노드를 삽입하는 함수. 꼬리 노드 바로 뒤에, 곧 더미 노드 바로 앞에 노드를 삽입하기 위해 주목 포인터 current가 참조하는 곳을
   head.prev로 업데이트한 상태에서 add() 함수를 호출한다.

 remove_current_node(self) -> None
 : 주목 노드를 삭제하는 함수이다. 더미 노드를 삭제할 수는 없으므로 먼저 리스트가 비어있는지 확인한 후, 리스트가 비어있으면 삭제 처리를 수행한다.
   current.prev의 뒤쪽 포인터 current.prev.next가 참조하는 곳이 현재노드의 다음노드가 되도록 업데이트 한다.
   current.next의 앞쪽 포인터 current.next.prev가 참조하는 곳이 현재노드의 이전노드가 되도록 업데이트 한다.
   현재노드는 어디에도 참조하지 않고 삭제 프로세스는 종료한다.
   현재주목포인터 current가 삭제한 노드의 앞쪽노드를 참조하도록 업데이트한다.

 remove(self, p: Node) -> None
 : 임의의 노드p(p가 참조하는 노드)를 삭제하는 함수이다. 삭제 처리는 리스트가 비어 있지 않고 인수에 주어진 노드p 가 존재하는 경우에만 수행한다.
   while 문으로 모든 노드를 스캔하는 과정에서 노드 p를 찾으면 current가 참조하는 곳을 p로 업데이트하고 remove_current_node()함수를 호출한다.

 remove_first(self) -> None
 : 머리 노드를 삭제하는 함수. 주목 포인터 current가 참조하는 곳을 머리노드 head.next로 업데이트한 상태에서 remove_current_node()를 호출한다.
   더미 노드를 삭제할 수 없으므로, head가 참조하는 더미 노드가 아니라 그 뒤쪽 노드(실제 머리노드)인 head.next를 삭제한다.

 remove_last(self) -> None
 : 꼬리 노드를 삭제하는 함수. 주목 포인터 current가 참조하는 곳을 머리노드 head.prev로 업데이트한 상태에서 remove_current_node()를 호출한다.

 clear(self) -> None
 : 더미 노드 이외의 모든 노드를 삭제하는 함수이다. 리스트가 비어있을때까지 remove_first() 함수로 머리 노드를 반복해서 삭제한다.

# 이터레이터용 클래스 DoubleLinkedListIterator
  이중 연결 리스트는 지금까지 배운 연결 리스트와 달리 양방향으로 스캔할 수 있다. 따라서 DoubleLinkedList는 뒤쪽으로 스캔하기 위한 일반 이터레이터
  DoubleLinkedListIterator 이외에 앞쪽으로 스캔하기 위한 DoubleLinkedListReverseIterator도 정의하고 있다.

 - 함수
 __init__(self, head: Node) -> None
 : 초기화 함수. 현재 주목노드의 head를 head로 초기화시키고 현재 주목노드를 head.next로 업데이트한다.

 __iter__(self) -> DoubleLinkedListIterator
 : 현재 노드를 반환합니다.

 def __next__(self) -> Any
 : 다음 원소를 꺼내 반환한다.
   데이터는 현재노드의 데이터이고, 현재노드는 다음노드로 업데이트한다.
   data = self.current.data / self.current = self.current.next
   현재노드가 head노드이면(더미노드) StopIteration 예외처리를 내보낸다.


# DoubleLinkedList의 내림차순 이터레이터용 클래스 DoubleLinkedListReverseIterator
  앞쪽으로 스캔하기 위한 이터레이터

 - 함수
 __init__(self, head: Node) -> None
 : 초기화 함수. 현재 주목노드의 head를 head로 초기화시키고 현재 주목노드를 head.prev로 업데이트한다.

 __iter__(self) -> DoubleLinkedListIterator
 : 현재 노드를 반환합니다.

 def __next__(self) -> Any
 : 다음 원소(역순)를 꺼내 반환한다.
   데이터는 현재노드의 데이터이고, 현재노드는 이전노드로 업데이트한다.
   data = self.current.data / self.current = self.current.prev
   현재노드가 head노드이면(더미노드) StopIteration 예외처리를 내보낸다.