# 노드 클래스 Node
: 이진 검색 트리의 노드를 나타내는 클래스 Node이다. 이진 검색 트리는 다음 4개의 필드로 구성된다.
 - 필드
 key: 키(임의의 형)을 나타낸다
 value: 값(임의의 형)을 나타낸다
 left: 왼쪽 자식 노드에 대한 참조(왼쪽 포인터)를 나타낸다
 right: 오른쪽 자식 노드에 대한 참조(오른쪽 포인터)를 나타낸다

 - 함수
 __init__(self, key: Any, value: Any, left: Node = None, right: Node = None)
 : 4개의 매개변수로 전달받은 값을 각 필드에 대입한다
   3번째 인수 left와 4번째 인수 right에는 기본값인 None이 지정되어 있다.

# 이진 검색 트리 클래스 BinarySearchTree
: 이진 검색 트리를 나타내는 클래스 BinarySearchTree이다. 이 클래스의 유일한 필드는 루트에 대한 참조를 유지하는 root이다.
 - 필드
 root: 루트 노드에 대한 참조를 유지하는 root이다.

 - 함수
 __init__(self) -> None
 : root에 None을 대입하여 노드가 하나도 없는 빈 상태의 이진 검색 트리를 생성한다.
   self.Node = None

 search(self, key: Any) -> Any
 : 키가 key인 노드를 검색한다.
   검색 알고리즘은 다음과 같다.
   1. 루트에 주목한다. 여기서 주목하는 노드를 p라고 한다.
   2. p가 None이면 검색을 실패하고 종료한다.
   3. 검색하는 key와 주목 노드 p의 키를 비교한다.
     - key = p: 검색을 성공하고 종료한다
     - key < p: 주목 노드를 왼쪽 자식 노드로 옮긴다
     - key > p: 주목 노드를 오른쪽 자식 노드로 옮긴다
   4. 3번 과정으로 되돌아간다.

 add(self, key: Any, value: Any) -> bool
 : 키가 key이고 값이 value인 노드를 삽입한다.
 * key와 같은 키를 갖는 노드가 존재하는 경우에는 삽입하지 않는다(False를 반환)
   노드를 삽입할 때 주의할 점은 노드를 삽입한 뒤에 트리의 형태가 이진 검색 트리의 조건을 유지해야 한다는 것이다.
   따라서 노드를 삽입할 때에는 검색할 때와 마찬가지로 먼저 삽입할 위치를 찾아낸 뒤에 수행해야 한다.
   node를 루트로 하는 서브트리에 키가 key인 노드를 삽입하는 알고리즘은 다음과 같다.
   (이때 node는 None이 아니다)

   1. 루트에 주목한다. 여기서 주목하는 노드를 node라고 한다.
   2. 삽입하는 key와 주목 노드 node의 키를 비교한다.
     - key = node: 삽입을 실패하고 종료한다
     - key < node:
       왼쪽 자식 노드가 없으면, 그 자리에 노드를 삽입하고 종료한다
       왼쪽 자식 노드가 있으면, 주목 노드를 왼쪽 자식 노드로 옮긴다
     - key > node:
       오른쪽 자식 노드가 없으면, 그 자리에 노드를 삽입하고 종료한다
       오른쪽 자식 노드가 있으면, 주목 노드를 오른쪽 자식 노드로 옮긴다
   3. 2번 과정으로 되돌아간다.

 remove(self, key: Any) -> bool
 : 노드를 삭제하는 함수. 노드를 삭제하는 과정은 삽입하는 과정보다 복잡하다. 노드를 삭제할 때 다음과 같은 3가지 경우가
   있기 때문이다.
 1. 자식 노드가 없는 노드를 삭제하는 경우
    - 삭제할 노드가 부모 노드의 왼쪽 자식이면, 부모의 왼쪽 포인터를 None으로 한다.
    - 삭제할 노드가 부모 노드의 오른쪽 자식이면, 부모의 오른쪽 포인터를 None으로 한다.
 2. 자식 노드가 1개인 노드를 삭제하는 경우
    - 삭제할 노드가 부모 노드의 왼쪽 자식인 경우: 부모의 왼쪽 포인터가 삭제할 노드의 자식을 가리키도록 업데이트한다.
    - 삭제할 노드가 부모 노드의 오른쪽 자식인 경우: 부모의 오른쪽 포인터가 삭제할 노드의 자식을 가리키도록 업데이트한다.
 3. 자식 노드가 2개인 노드를 삭제하는 경우(가장 어려움)
    - 삭제할 노드의 왼쪽 서브트리에서 키값이 가장 큰 노드를 검색한다.
    - 검색한 노드를 삭제 위치로 옮긴다. 즉, 검색한 노드의 데이터를 삭제할 노드 위치에 복사한다.
    - 옮긴 노드를 삭제한다. 이때 자식 노드의 개수에 따라 다음을 수행한다.
      A)옮긴 노드에 자식이 없으면: '자식 노드가 없는 노드의 삭제(1)'에 따라 노드를 삭제한다.
      B)옮긴 노드에 자식이 1개만 있으면: '자식 노드가 1개인 노드의 삭제(2)'에 따라 노드를 삭제한다.

 dump(self) -> None
 : 모든 노드를 오름차순으로 출력하는 함수. 스캔은 중위 순회의 깊이 우선 검색으로한다.
   root를 인수로 하여 내부 함수 print_subtree()를 호출한다. print_subtree()함수는 node를 루트로 하는 서브트리의 노드를
   오름차순으로 출력하는 재귀함수이다.
   1.왼쪽 노드를 참조하는 왼쪽 포인터를 전달하여 print_subtree()를 재귀적으로 호출한다.
   2.자신의 노드 데이터를 출력한다(root)
   3.오른쪽 노드를 참조하는 왼쪽 포인터를 전달하여 print_subtree()를 재귀적으로 호출한다.

 dump(self, reverse = False) -> None:
 : 모든 노드를 키의 오름차순/내림차순으로 출력
   2번째 인수 reverse에 True를 전달받으면 내부함수 print_subtree()에서 키의 오름차순으로 덤프하고, 그렇지 않으면
   내부함수 print_subtree_rev()에서 키의 내림차순으로 덤프한다.

 min_key(self) -> Any, max_key(self) -> Any
 : 가장 작은 키를 반환하는 min_key와 가장 큰 키를 반환하는 max_key함수.
   맨 끝인 None을 만날 때까지 왼쪽 또는 오른쪽 자식을 따라가는 알고리즘이다.