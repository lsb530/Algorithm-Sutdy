# 이진트리(Binary tree)?
: 노드가 왼쪽 자식(left child)와 오른쪽 자식(right child)만을 갖는 트리를 이진 트리(binary tree)라고 한다.
  이때 두 자식 가운데 하나 또는 둘 다 존재하지 않는 노드가 있어도 상관없다.
                         A
                     /      \
                    B        C
                   / \      / \
                  D   E    F   G
                 /   / \  / \
                H   I   J K  L
  이진트리의 특징은 왼쪽 자식과 오른쪽 자식을 구분한다는 점이다. 예를 들어 노드 B의 왼쪽 자식은 D이고 오른쪽 자식은 E이다.
  또 왼쪽 자식을 루트로 하는 서브트리를 왼쪽 서브트리(left subtree)라 하고, 오른쪽 자식을 루트로 하는 서브트리를 오른쪽
  서브트리(right subtree)라고 한다.
  B의 left subtree: B D H / right subtree: E I J

# 완전 이진 트리(Complete binary tree)
: 루트부터 아래쪽 레벨로 노드가 가득 차 있고, 같은 레벨 안에서 왼쪽부터 오른쪽으로 노드가 채워져 있는 이진 트리를
  완전 이진 트리(complete binary tree)라고 한다.
  - 마지막 레벨을 제외하고 모든 레벨에 노드가 가득 차 있다.
  - 마지막 레벨에 한해서 왼쪽부터 오른쪽으로 노드를 채우되 반드시 끝까지 채우지 않아도 된다.
  높이가 k인 완전 이진 트리가 가질 수 있는 노드의 수는 최대 2^k+1 - 1개이므로, n개의 노드를 저장할 수 있는 완전 이진 트리의
  높이는 log n이다.
                         0
                     /      \
                    1        2
                   / \      / \
                  3   4    5   6
                 /   / \  / \
                7   8  9 10 11
  이와 같이 너비 우선 검색에서 스캔하는 순서대로(0/1/2/3/4/5/6/78/9/10/11) 각 노드에 0, 1, 2, ...의 값을 주면 배열에 저장하는
  인덱스와 일대일로 정확히 대응시킬 수 있다. => 이 방법은 정렬의 '힙 정렬'에서 사용함.